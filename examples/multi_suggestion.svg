<svg width="740px" height="524px" xmlns="http://www.w3.org/2000/svg">
  <style>
    .fg { fill: #AAAAAA }
    .bg { background: #000000 }
    .fg-bright-blue { fill: #5555FF }
    .fg-bright-cyan { fill: #55FFFF }
    .fg-bright-green { fill: #55FF55 }
    .fg-bright-red { fill: #FF5555 }
    .container {
      padding: 0 10px;
      line-height: 18px;
    }
    .bold { font-weight: bold; }
    tspan {
      font: 14px SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace;
      white-space: pre;
      line-height: 18px;
    }
  </style>

  <rect width="100%" height="100%" y="0" rx="4.5" class="bg" />

  <text xml:space="preserve" class="container fg">
    <tspan x="10px" y="28px"><tspan class="fg-bright-red bold">error</tspan><tspan class="bold">: cannot construct `Box&lt;_, _&gt;` with struct literal syntax due to private fields</tspan>
</tspan>
    <tspan x="10px" y="46px"><tspan>  </tspan><tspan class="fg-bright-blue bold"> ╭▸ </tspan><tspan>$DIR/multi-suggestion.rs:17:13</tspan>
</tspan>
    <tspan x="10px" y="64px"><tspan>   </tspan><tspan class="fg-bright-blue bold">│</tspan>
</tspan>
    <tspan x="10px" y="82px"><tspan class="fg-bright-blue bold">17</tspan><tspan> </tspan><tspan class="fg-bright-blue bold">│</tspan><tspan>     let _ = Box {};</tspan>
</tspan>
    <tspan x="10px" y="100px"><tspan>   </tspan><tspan class="fg-bright-blue bold">│</tspan><tspan>             </tspan><tspan class="fg-bright-red bold">━━━</tspan>
</tspan>
    <tspan x="10px" y="118px"><tspan>   </tspan><tspan class="fg-bright-blue bold">│</tspan>
</tspan>
    <tspan x="10px" y="136px"><tspan>   </tspan><tspan class="fg-bright-blue bold">╰ </tspan><tspan class="bold">note</tspan><tspan>: private fields `0` and `1` that were not provided</tspan>
</tspan>
    <tspan x="10px" y="154px"><tspan class="fg-bright-cyan bold">help</tspan><tspan>: you might have meant to use an associated function to build this type</tspan>
</tspan>
    <tspan x="10px" y="172px"><tspan>   </tspan><tspan class="fg-bright-blue bold">╭╴</tspan>
</tspan>
    <tspan x="10px" y="190px"><tspan class="fg-bright-blue bold">17</tspan><tspan> </tspan><tspan class="fg-bright-red">- </tspan><tspan>    let _ = Box</tspan><tspan class="fg-bright-red"> {}</tspan><tspan>;</tspan>
</tspan>
    <tspan x="10px" y="208px"><tspan class="fg-bright-blue bold">17</tspan><tspan> </tspan><tspan class="fg-bright-green">+ </tspan><tspan>    let _ = Box</tspan><tspan class="fg-bright-green">::new(_)</tspan><tspan>;</tspan>
</tspan>
    <tspan x="10px" y="226px"><tspan>   </tspan><tspan class="fg-bright-blue bold">├╴</tspan>
</tspan>
    <tspan x="10px" y="244px"><tspan class="fg-bright-blue bold">17</tspan><tspan> </tspan><tspan class="fg-bright-red">- </tspan><tspan>    let _ = Box</tspan><tspan class="fg-bright-red"> {}</tspan><tspan>;</tspan>
</tspan>
    <tspan x="10px" y="262px"><tspan class="fg-bright-blue bold">17</tspan><tspan> </tspan><tspan class="fg-bright-green">+ </tspan><tspan>    let _ = Box</tspan><tspan class="fg-bright-green">::new_uninit()</tspan><tspan>;</tspan>
</tspan>
    <tspan x="10px" y="280px"><tspan>   </tspan><tspan class="fg-bright-blue bold">├╴</tspan>
</tspan>
    <tspan x="10px" y="298px"><tspan class="fg-bright-blue bold">17</tspan><tspan> </tspan><tspan class="fg-bright-red">- </tspan><tspan>    let _ = Box</tspan><tspan class="fg-bright-red"> {}</tspan><tspan>;</tspan>
</tspan>
    <tspan x="10px" y="316px"><tspan class="fg-bright-blue bold">17</tspan><tspan> </tspan><tspan class="fg-bright-green">+ </tspan><tspan>    let _ = Box</tspan><tspan class="fg-bright-green">::new_zeroed()</tspan><tspan>;</tspan>
</tspan>
    <tspan x="10px" y="334px"><tspan>   </tspan><tspan class="fg-bright-blue bold">├╴</tspan>
</tspan>
    <tspan x="10px" y="352px"><tspan class="fg-bright-blue bold">17</tspan><tspan> </tspan><tspan class="fg-bright-red">- </tspan><tspan>    let _ = Box</tspan><tspan class="fg-bright-red"> {}</tspan><tspan>;</tspan>
</tspan>
    <tspan x="10px" y="370px"><tspan class="fg-bright-blue bold">17</tspan><tspan> </tspan><tspan class="fg-bright-green">+ </tspan><tspan>    let _ = Box</tspan><tspan class="fg-bright-green">::new_in(_, _)</tspan><tspan>;</tspan>
</tspan>
    <tspan x="10px" y="388px"><tspan>   </tspan><tspan class="fg-bright-blue bold">│</tspan>
</tspan>
    <tspan x="10px" y="406px"><tspan>   </tspan><tspan class="fg-bright-blue bold">╰ </tspan><tspan>and 12 other candidates</tspan>
</tspan>
    <tspan x="10px" y="424px"><tspan class="fg-bright-cyan bold">help</tspan><tspan>: consider using the `Default` trait</tspan>
</tspan>
    <tspan x="10px" y="442px"><tspan>   </tspan><tspan class="fg-bright-blue bold">╭╴</tspan>
</tspan>
    <tspan x="10px" y="460px"><tspan class="fg-bright-blue bold">17</tspan><tspan> </tspan><tspan class="fg-bright-red">- </tspan><tspan>    let _ = Box</tspan><tspan class="fg-bright-red"> {}</tspan><tspan>;</tspan>
</tspan>
    <tspan x="10px" y="478px"><tspan class="fg-bright-blue bold">17</tspan><tspan> </tspan><tspan class="fg-bright-green">+ </tspan><tspan>    let _ = </tspan><tspan class="fg-bright-green">&lt;</tspan><tspan>Box</tspan><tspan class="fg-bright-green"> as std::default::Default&gt;::default()</tspan><tspan>;</tspan>
</tspan>
    <tspan x="10px" y="496px"><tspan>   </tspan><tspan class="fg-bright-blue bold">╰╴</tspan>
</tspan>
    <tspan x="10px" y="514px">
</tspan>
  </text>

</svg>
